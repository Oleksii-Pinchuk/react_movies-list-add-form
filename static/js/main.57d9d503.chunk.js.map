{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","onAdd","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isTitleError","setIsTitleError","isImgUrlError","setIsImgUrlError","isImdbUrlError","setIsImdbUrlError","isImdbIdError","setIsImdbIdError","isUrl","url","test","onSubmit","event","preventDefault","htmlFor","classNames","type","id","placeholder","value","onChange","target","onBlur","trim","disabled","length","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57d9d503.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [isImgUrlError, setIsImgUrlError] = useState(false);\n  const [isImdbUrlError, setIsImdbUrlError] = useState(false);\n  const [isImdbIdError, setIsImdbIdError] = useState(false);\n\n  const isUrl = (url: string) => {\n    return /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(url);\n  };\n\n  const isButtonDisabled = () => {\n    if (title.trim().length && imdbId.trim().length && isUrl(imgUrl) && isUrl(imdbUrl)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const resetErrors = () => {\n    setIsTitleError(false);\n    setIsImgUrlError(false);\n    setIsImdbUrlError(false);\n    setIsImdbIdError(false);\n  };\n\n  const resetInputs = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const onSubmitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    resetInputs();\n    resetErrors();\n  };\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={onSubmitForm}\n    >\n      <label\n        htmlFor=\"title\"\n        className={classNames('label', { 'label--error': isTitleError })}\n      >\n        <input\n          className={classNames('input', { 'input--error': isTitleError })}\n          type=\"text\"\n          id=\"title\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n          onBlur={() => setIsTitleError(!title.trim())}\n        />\n      </label>\n\n      <label\n        htmlFor=\"description\"\n        className=\"label\"\n      >\n        <input\n          className=\"input\"\n          type=\"text\"\n          id=\"description\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </label>\n\n      <label\n        htmlFor=\"imgUrl\"\n        className={classNames('label', { 'label--error': isImgUrlError })}\n      >\n        <input\n          className={classNames('input', { 'input--error': isImgUrlError })}\n          type=\"text\"\n          id=\"imgUrl\"\n          placeholder=\"Image Url\"\n          value={imgUrl}\n          onChange={(event) => setImgUrl(event.target.value)}\n          onBlur={() => setIsImgUrlError(!isUrl(imgUrl))}\n        />\n      </label>\n\n      <label\n        htmlFor=\"title\"\n        className={classNames('label', { 'label--error': isImdbUrlError })}\n      >\n        <input\n          className={classNames('input', { 'input--error': isImdbUrlError })}\n          type=\"text\"\n          id=\"imdbUrl\"\n          placeholder=\"IMDB Url\"\n          value={imdbUrl}\n          onChange={event => setImdbUrl(event.target.value)}\n          onBlur={() => setIsImdbUrlError(!isUrl(imdbUrl))}\n        />\n      </label>\n\n      <label\n        htmlFor=\"imdbId\"\n        className={classNames('label', { 'label--error': isImdbIdError })}\n      >\n        <input\n          className={classNames('input', { 'input--error': isImdbIdError })}\n          type=\"text\"\n          id=\"imdbId\"\n          placeholder=\"IMDB Id\"\n          value={imdbId}\n          onChange={(event) => setImdbId(event.target.value)}\n          onBlur={() => setIsImdbIdError(!imdbId.trim())}\n        />\n      </label>\n\n      <button\n        className=\"button\"\n        type=\"submit\"\n        disabled={isButtonDisabled()}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}