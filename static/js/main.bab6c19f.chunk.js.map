{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","regex","NewMovie","onAdd","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isTitleTouched","setIsTitleTouched","isImgUrlTouched","setIsImgUrlTouched","isImdbUrlTouched","setIsImdbUrlTouched","isImdbIdTouched","setIsImdbIdTouched","isUrl","url","test","errors","trim","length","onSubmit","event","preventDefault","htmlFor","classNames","type","id","placeholder","value","onChange","target","onBlur","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bab6c19f.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nconst regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [isTitleTouched, setIsTitleTouched] = useState(false);\n  const [isImgUrlTouched, setIsImgUrlTouched] = useState(false);\n  const [isImdbUrlTouched, setIsImdbUrlTouched] = useState(false);\n  const [isImdbIdTouched, setIsImdbIdTouched] = useState(false);\n\n  const isUrl = (url: string) => {\n    return regex.test(url);\n  };\n\n  const errors = {\n    title: title.trim().length === 0,\n    imgUrl: imgUrl.trim().length === 0 || !isUrl(imgUrl),\n    imdbUrl: imdbUrl.trim().length === 0 || !isUrl(imdbUrl),\n    imdbId: imdbId.trim().length === 0,\n  };\n\n  const isButtonDisabled = () => {\n    if (title.trim().length && imdbId.trim().length && isUrl(imgUrl) && isUrl(imdbUrl)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const resetTouchInfo = () => {\n    setIsTitleTouched(false);\n    setIsImgUrlTouched(false);\n    setIsImdbUrlTouched(false);\n    setIsImdbIdTouched(false);\n  };\n\n  const resetInputs = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const onSubmitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    resetInputs();\n    resetTouchInfo();\n  };\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={onSubmitForm}\n    >\n\n      <label htmlFor=\"title\" className=\"label\">\n        <input\n          className={classNames(\n            'input',\n            { 'input--error': isTitleTouched && errors.title },\n          )}\n          type=\"text\"\n          id={title}\n          placeholder=\"Title\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n          onBlur={() => setIsTitleTouched(true)}\n        />\n\n        <div\n          className={classNames(\n            'message',\n            { 'message--hidden': !isTitleTouched || !errors.title },\n          )}\n        >\n          Please enter data in correct format\n        </div>\n      </label>\n\n      <label htmlFor=\"description\" className=\"label\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          id={description}\n          placeholder=\"Description\"\n          value={description}\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </label>\n\n      <label\n        htmlFor=\"imgUrl\"\n        className=\"label\"\n      >\n        <input\n          className={classNames(\n            'input',\n            { 'input--error': isImgUrlTouched && errors.imgUrl },\n          )}\n          type=\"text\"\n          id=\"imgUrl\"\n          placeholder=\"Image Url\"\n          value={imgUrl}\n          onChange={(event) => setImgUrl(event.target.value)}\n          onBlur={() => setIsImgUrlTouched(true)}\n        />\n\n        <div\n          className={classNames(\n            'message',\n            { 'message--hidden': !isImgUrlTouched || !errors.imgUrl },\n          )}\n        >\n          Please enter data in correct format\n        </div>\n      </label>\n\n      <label htmlFor=\"imdbUrl\" className=\"label\">\n        <input\n          className={classNames(\n            'input',\n            { 'input--error': isImdbUrlTouched && errors.imdbUrl },\n          )}\n          type=\"text\"\n          id=\"imdbUrl\"\n          placeholder=\"IMDB Url\"\n          value={imdbUrl}\n          onChange={event => setImdbUrl(event.target.value)}\n          onBlur={() => setIsImdbUrlTouched(true)}\n        />\n\n        <div\n          className={classNames(\n            'message',\n            { 'message--hidden': !isImdbUrlTouched || !errors.imdbUrl },\n          )}\n        >\n          Please enter data in correct format\n        </div>\n      </label>\n\n      <label\n        htmlFor=\"imdbId\"\n        className=\"label\"\n      >\n        <input\n          className={classNames(\n            'input',\n            { 'input--error': isImdbIdTouched && errors.imdbId },\n          )}\n          type=\"text\"\n          id=\"imdbId\"\n          placeholder=\"IMDB Id\"\n          value={imdbId}\n          onChange={(event) => setImdbId(event.target.value)}\n          onBlur={() => setIsImdbIdTouched(true)}\n        />\n\n        <div\n          className={classNames(\n            'message',\n            { 'message--hidden': !isImdbIdTouched || !errors.imdbId },\n          )}\n        >\n          Please enter data in correct format\n        </div>\n      </label>\n\n      <button\n        className=\"button\"\n        type=\"submit\"\n        disabled={isButtonDisabled()}\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}